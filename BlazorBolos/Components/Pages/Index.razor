@page "/"
@rendermode InteractiveServer

<MudDialogProvider></MudDialogProvider>
<MudContainer Class="d-flex justify-center mb-2">
    <MudFab Color="Color.Primary"
            StartIcon="@Icons.Material.Filled.Add"
            Size="Size.Large"
            IconSize="Size.Large"
            Label="Incluir Bolo"
            Class="ma-2" @onclick="(a => CreateAsync())">
    </MudFab>
</MudContainer>

<MudGrid Justify="Justify.Center" Class="pr-4 pl-4">
    @foreach (var bolo in bolos)
    {
        <MudItem xs="2">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Type="Type.body1">@bolo.Nome</MudText>
                        <MudText Type="Type.h6">R$ @bolo.Preco</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardMedia Image="@bolo.ImagemUrl" width="100" Height="200"></MudCardMedia>
                <MudCardContent>
                    <MudText Type="Type.body2">@bolo.Descricao</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" @onclick="(a => UpdateAsync(bolo.Id))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="(a => DeleteAsync(bolo.Id))"></MudIconButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code
{
    List<Bolo> bolos = new List<Bolo>();

    protected override async Task OnInitializedAsync()
    {
        bolos = await _context.Bolos.ToListAsync();
    }

    private async Task CreateAsync()
    {
        var parameters = new DialogParameters();
        parameters.Add("Bolo", new Bolo());

        var dialog = _dialogService.Show<GerenciaBolosDialog>("Incluir", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var novoBolo = result.Data as Bolo;
            _context.Bolos.Add(novoBolo!);
            await _context.SaveChangesAsync();
            bolos.Insert(0, novoBolo);
            StateHasChanged();
        }
    }

    private async Task UpdateAsync(int id)
    {
        var parameters = new DialogParameters();
        var boloAtualizar = bolos.FirstOrDefault(f => f.Id == id);
        parameters.Add("Bolo", boloAtualizar);

        var dialog = _dialogService.Show<GerenciaBolosDialog>("Atualizar", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var boloAtualizado = result.Data as Bolo;
            _context.Bolos.Update(boloAtualizar!);
            await _context.SaveChangesAsync();

            bolos.Remove(boloAtualizado);
            bolos.Insert(0, boloAtualizado);
            StateHasChanged();
        }
    }

    private async Task DeleteAsync(int id)
    {
        bool? result = await _dialogService.ShowMessageBox(
            "Confirma exclusão",
            "A exclusão não pode ser desfeita!",
            yesText: "Deleta", cancelText: "Cancela");

        if (result ?? false)
        {
            var boloRemover = await _context.Bolos.FindAsync(id);

            _context.Bolos.Remove(boloRemover!);
            
            await _context.SaveChangesAsync();

            StateHasChanged();
        }
    }
}
